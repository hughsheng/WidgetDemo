apply plugin: 'com.android.application'
apply plugin: 'AndResGuard'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//根build.gradle 第三方库版本号管理
def libs = rootProject.ext.libraries
def cfg = rootProject.ext.configuration
def testLibs = rootProject.ext.testlibraries
def comLibs = rootProject.ext.comlibraries

//本地properties文件配置数据
Properties properties = new Properties()
def writer = project.rootProject.file('local_config.properties')
properties.load(writer.newDataInputStream())
def verCode = properties.getProperty("versionCode")
def appVersionName = properties.getProperty("versionName")
def appversionCode = verCode.toInteger()

android {

    //签名设置
    signingConfigs {
        config {
            keyAlias 'widgeDemo'
            keyPassword '111111'
            storeFile file('../keystore/widgeDemo.jks')
            storePassword '111111'
        }
    }

    //默认配置
    defaultConfig {
        applicationId "com.example.sztangli.widgedemo"
        //代表着编译的时候，会采用该api的规范进行代码检查和警告，但是并不会编译进apk中。
        compileSdkVersion BuildConfig.compileSdkVersion
        buildToolsVersion BuildConfig.buildToolsVersion
        // 代表着最低版本，在编译的时候兼容到该参数指定最低版本api
        minSdkVersion BuildConfig.minSdkVersion
        //代表着目标版本，在编译的时候会将该版本的api编译进apk中。(app运行api)
        targetSdkVersion BuildConfig.targetSdkVersion
        versionCode appversionCode
        versionName appVersionName
        flavorDimensions "default"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Enabling multidex support.
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [eventBusIndex: 'com.bandeng.MyEventBusIndex']
            }
        }
        //设置支持的so库架构类型
        ndk {
            abiFilters 'armeabi', "armeabi-v7a", "x86"
        }
    }

    //构建类型
    buildTypes {

        //通用配置
        commons {
            buildConfigField "String", "WEIXIN_KEY", properties.getProperty("WEIXIN_KEY")
            matchingFallbacks = ['debug', 'release']//依赖库没有指定的buildtype采用这里指定的buildtype
        }

        //release
        release {
            initWith(buildTypes.commons)
            buildConfigField "String", "SERVER_URL", properties.getProperty("RELEASE_SERVER_URL")
            applicationIdSuffix ".release" //正式包APPID后缀,在手机上正式包和测试包就能共存了
            signingConfig signingConfigs.config
            debuggable true
            zipAlignEnabled true          //字节码优化
            //shrinkResources true          //检测和删除没有使用的类，字段，方法和属性
            // minifyEnabled true            //代码混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //debug
        debug {
            initWith(buildTypes.commons)
            buildConfigField "String", "SERVER_URL", properties.getProperty("DEBUG_SERVER_URL")
            applicationIdSuffix ".debug"//测试包APPID后缀
            debuggable true
            signingConfig signingConfigs.config
        }
    }

    //lint检测设置
    lintOptions {
        disable 'GoogleAppIndexingWarning'  //去除google搜索检测不到该app警告
        //  baseline file("lint-baseline.xml") // your choice of filename/path here
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //开始输出,自定义输出路径
            def outputFile = output.outputFile
            def fileName = "widgeDemo.apk"
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "v" + appVersionName +
                            "_" + variant.productFlavors[0].name +
                            properties.getProperty("release_apk_name")
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "v_" + appVersionName +
                            "_" + variant.productFlavors[0].name +
                            properties.getProperty("debug_apk_name")
                }
                outputFileName = fileName
            }
        }
    }

    productFlavors {
        local {}
        wandoujia {}
        baidu {}
        a360 {}
        huawei {}
        xiaomi {}
        tengxun {}
    }

    //设置渠道名
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }

    //忽略通用配置在variant的显示
    variantFilter { variant ->
        if (variant.buildType.name.equals('commons')) {
            variant.setIgnore(true)
        }

//        if(variant.getFlavors().get(0).name.equals('wandoujia')){
//            variant.setIgnore(true)
//        }
//
//        if(variant.getFlavors().get(0).name.equals('baidu')){
//            variant.setIgnore(true)
//        }
//
//        if(variant.getFlavors().get(0).name.equals('a360')){
//            variant.setIgnore(true)
//        }
//
//        if(variant.getFlavors().get(0).name.equals('huawei')){
//            variant.setIgnore(true)
//        }
//
//        if(variant.getFlavors().get(0).name.equals('xiaomi')){
//            variant.setIgnore(true)
//        }
//
//        if(variant.getFlavors().get(0).name.equals('tengxun')){
//            variant.setIgnore(true)
//        }
    }

    //开启databingding
    buildFeatures {
        dataBinding = true
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8

        targetCompatibility JavaVersion.VERSION_1_8

    }


    //资源混淆
    andResGuard {
        // mappingFile = file("./resource_mapping.txt")
        mappingFile = null
        use7zip = true
        useSign = true
        // it will keep the origin path of your resources when it's true
        keepRoot = false
        whiteList = [
                // your icon
                "R.drawable.icon",
                // for fabric
                "R.string.com.crashlytics.*",
                // for umeng update
                "R.string.umeng*",
                "R.string.UM*",
                "R.string.tb_*",
                "R.layout.umeng*",
                "R.layout.tb_*",
                "R.drawable.umeng*",
                "R.drawable.tb_*",
                "R.anim.umeng*",
                "R.color.umeng*",
                "R.color.tb_*",
                "R.style.*UM*",
                "R.style.umeng*",
                "R.id.umeng*",
                // umeng share for sina
                "R.drawable.sina*",
                // for google-services.json
                "R.string.google_app_id",
                "R.string.gcm_defaultSenderId",
                "R.string.default_web_client_id",
                "R.string.ga_trackingId",
                "R.string.firebase_database_url",
                "R.string.google_api_key",
                "R.string.google_crash_reporting_api_key"
        ]
        compressFilePattern = [
                "*.png",
                "*.jpg",
                "*.jpeg",
                "*.gif",
                "resources.arsc"
        ]
        sevenzip {
            artifact = 'com.tencent.mm:SevenZip:1.2.7'
//            path = "${projectDir}" + "/releases/"
        }
    }

}

//强制修改所有android.support包版本号
//configurations.all {
//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        def requested = details.requested
//        if (requested.group == 'com.android.support') {
//            if (!requested.name.startsWith("multidex")) {
//                details.useVersion '28.0.0'
//            }
//        }
//    }
//}


//依赖
dependencies {
    //依赖libs下所有jar包
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //尽掌中依赖库
    implementation project(path: ':handleinlibrary')

    //android官方支持库
    implementation AndroidX.appcompat
    implementation AndroidX.recyclerview
    implementation Android.meteria
    implementation AndroidX.constraintlayout
    implementation AndroidX.lifecycleRuntime
    implementation AndroidX.lifeCycleKT
    implementation AndroidX.lifeCycleExtension
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.21'


    //android官方测试库
    testImplementation Depend.junit
    androidTestImplementation Depend.androidTestJunit
    androidTestImplementation Depend.espressoCore
    androidTestImplementation Depend.androidTestCore

    //evenbus
    implementation 'org.greenrobot:eventbus:3.2.0'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.0.1'
    //butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    //leakcanary内存泄漏检测
    debugImplementation "com.squareup.leakcanary:leakcanary-android:1.6.2"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.6.2"

    //谷歌分包方案，解决方法数最大值65536限制(api21以下需要该库)
    implementation 'androidx.multidex:multidex:2.0.1'

    //gson
    implementation "com.google.code.gson:gson:2.8.5"

    //websocket
    // implementation "com.dhh:websocket:1.3.0"

    //加载等待圈
    implementation "com.bigkoo:svprogresshud:1.0.6"

    //二维码
    implementation 'com.google.zxing:core:3.3.3'

    //权限检测
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'

    //转圈
    implementation SpinKit.runtime

    //支付宝sdk
    implementation files('libs/alipaySdk-20180601.jar')
    //微信sdk
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.1.6'
    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0' //okhttp日志拦截器
    //dragger2
    implementation "com.google.dagger:dagger:2.28"
    annotationProcessor "com.google.dagger:dagger-compiler:2.28"
//    //rxandroid
    implementation Rxandroid.rxjava3
    implementation Rxandroid.rxandroid


    //retrofit
    implementation Retrofit.runtime
    implementation Retrofit.gson
    implementation Retrofit.adapter
    implementation Retrofit.logging

    implementation 'se.emilsjolander:stickylistheaders:2.7.0'
    implementation 'com.flipboard:bottomsheet-core:1.5.1'

    //视频播放器
    implementation 'cn.jzvd:jiaozivideoplayer:6.4.1'

    //hilt
    implementation Hilt.daggerRuntime
    kapt Hilt.daggerCompiler
    implementation Hilt.viewModule
    kapt Hilt.compiler

    //glide图片加载库
    implementation Glide.runtime
    implementation Glide.okhttp3Integration
    implementation Glide.annotations
    annotationProcessor Glide.compiler

    //文件选择
    implementation FilePicker.runtime
}
